{"version":3,"file":"fcl.modern.js","sources":["../src/default-config.js","../src/temp.js","../src/VERSION.js","../src/exec/query.js","../src/serialize/index.js","../src/transaction/index.js","../src/events/index.js","../src/current-user/normalize/__vsn.js","../src/current-user/normalize/frame.js","../src/current-user/normalize/back-channel-rpc.js","../src/current-user/normalize/service.js","../src/current-user/normalize/pre-authz.js","../src/current-user/normalize/authz.js","../src/current-user/normalize/authn.js","../src/current-user/normalize/open-id.js","../src/current-user/build-user.js","../src/current-user/service-of-type.js","../src/current-user/exec-service/strategies/utils/service-endpoint.js","../src/current-user/exec-service/strategies/utils/fetch-service.js","../src/current-user/normalize/polling-response.js","../src/current-user/normalize/composite-signature.js","../src/current-user/exec-service/strategies/utils/render-frame.js","../src/current-user/exec-service/strategies/utils/frame.js","../src/current-user/exec-service/strategies/utils/poll.js","../src/current-user/exec-service/strategies/http-post.js","../src/current-user/exec-service/index.js","../src/current-user/exec-service/strategies/iframe-rpc.js","../src/current-user/index.js","../src/current-user/merge-services.js","../src/current-user/fetch-services.js","../src/fcl.js"],"sourcesContent":["import {config} from \"@onflow/config\"\n\nconfig()\n  .put(\"accessNode.api\", \"http://localhost:8080\")\n  .put(\"challenge.handshake\", \"http://localhost:8700/authenticate\")\n","import {config} from \"@onflow/config\"\nimport {resolve} from \"@onflow/sdk\"\n\nconfig().put(\"sdk.resolve\", resolve)\n","export const VERSION = \"0.0.70\"\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\n// import {send, script, decode, limit, args, arg} from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\n\nconst isRequired = d => typeof d != null\nconst isString = d => typeof d === \"string\"\nconst isFunc = d => typeof d === \"function\"\n\n/** Query the Flow Blockchain\n *\n *  @arg {Object} opts         - Query Options and configuration\n *  @arg {string} opts.cadence - Cadence Script used to query Flow\n *  @arg {ArgsFn} opts.args    - Arguments passed to cadence script\n *  @arg {number} opts.limit   - Compute Limit for Query\n *  @returns {Promise<Response>}\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    const cadence = `\n *      cadence: `\n *        pub fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await query({ cadence, args })\n */\nexport async function query(opts = {}) {\n  await preQuery(opts)\n\n  // prettier-ignore\n  return sdk.send([\n    sdk.script(opts.cadence),\n    sdk.args(normalizeArgs(opts.args || [])),\n    opts.limit && typeof opts.limit === \"number\" && sdk.limit(opts.limit)\n  ]).then(sdk.decode)\n}\n\nasync function preQuery(opts) {\n  invariant(\n    isRequired(opts.cadence),\n    \"query({ cadence }) -- cadence is required\"\n  )\n\n  invariant(\n    isString(opts.cadence),\n    \"query({ cadence }) -- cadence must be a string\"\n  )\n}\n\nfunction normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(sdk.arg, t)\n  return []\n}\n","import {interaction, pipe} from \"@onflow/sdk\"\nimport {resolve as defaultResolve} from \"@onflow/sdk\"\nimport {config} from \"@onflow/config\"\n\nexport const serialize = async (args = [], opts = {}) => {\n  // prettier-ignore\n  const resolveFunction = await config()\n    .get(\"sdk.resolve\", opts.resolve || defaultResolve(opts))\n\n  if (Array.isArray(args)) args = await pipe(interaction(), args)\n  return JSON.stringify(await resolveFunction(args), null, 2)\n}\n","import \"../default-config\"\nimport {config} from \"@onflow/config\"\nimport {\n  spawn,\n  send,\n  subscriber,\n  snapshoter,\n  UPDATED,\n  SNAPSHOT,\n  INIT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n} from \"@onflow/util-actor\"\nimport {send as fclSend} from \"@onflow/sdk\"\nimport {decode} from \"@onflow/sdk\"\nimport {getTransactionStatus} from \"@onflow/sdk\"\n\nconst RATE = 2500\nconst POLL = \"POLL\"\n\nconst fetchTxStatus = async (transactionId) => {\n  return fclSend([getTransactionStatus(transactionId)]).then(decode)\n}\n\nconst isExpired = (tx) => tx.status === 5\nconst isSealed = (tx) => tx.status >= 4\nconst isExecuted = (tx) => tx.status >= 3\nconst isFinalized = (tx) => tx.status >= 2\nconst isPending = (tx) => tx.status >= 1\nconst isUnknown = (tx) => tx.status >= 0\n\nconst isDiff = (cur, next) => {\n  return JSON.stringify(cur) !== JSON.stringify(next)\n}\n\nconst HANDLERS = {\n  [INIT]: async (ctx) => {\n    const tx = await fetchTxStatus(ctx.self())\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    ctx.merge(tx)\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, ctx.all())\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply(ctx.all())\n  },\n  [POLL]: async (ctx) => {\n    const tx = await fetchTxStatus(ctx.self())\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    if (isDiff(ctx.all(), tx)) ctx.broadcast(UPDATED, tx)\n    ctx.merge(tx)\n  },\n}\n\nconst scoped = (transactionId) => {\n  if (typeof transactionId === \"object\")\n    transactionId = transactionId.transactionId\n  if (transactionId == null) throw new Error(\"transactionId required\")\n  return transactionId\n}\n\nconst spawnTransaction = (transactionId) => {\n  return spawn(HANDLERS, scoped(transactionId))\n}\n\nexport function transaction(transactionId) {\n  function snapshot() {\n    return snapshoter(transactionId, spawnTransaction)\n  }\n\n  function subscribe(callback) {\n    return subscriber(scoped(transactionId), spawnTransaction, callback)\n  }\n\n  function once(predicate) {\n    return function innerOnce(opts = {}) {\n      const suppress = opts.suppress || false\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe((txStatus) => {\n          if (txStatus.statusCode && !suppress) {\n            reject(txStatus.errorMessage)\n            unsub()\n          } else if (predicate(txStatus)) {\n            resolve(txStatus)\n            unsub()\n          }\n        })\n      })\n    }\n  }\n\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed),\n  }\n}\n\ntransaction.isUnknown = isUnknown\ntransaction.isPending = isPending\ntransaction.isFinalized = isFinalized\ntransaction.isExecuted = isExecuted\ntransaction.isSealed = isSealed\ntransaction.isExpired = isExpired\n","import {spawn, subscriber, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {config} from \"@onflow/config\"\nimport {latestBlock} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nimport {send} from \"@onflow/sdk\"\nimport {decode} from \"@onflow/sdk\"\n\nconst RATE = 10000\nconst UPDATED = \"UPDATED\"\nconst TICK = \"TICK\"\n\nconst scheduleTick = async ctx => {\n  return setTimeout(\n    () => ctx.sendSelf(TICK),\n    await config().get(\"fcl.eventPollRate\", RATE)\n  )\n}\n\nconst HANDLERS = {\n  [TICK]: async ctx => {\n    if (!ctx.hasSubs()) return\n    let hwm = ctx.get(\"hwm\")\n    if (hwm == null) {\n      ctx.put(\"hwm\", await latestBlock())\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    } else {\n      let next = await latestBlock()\n      ctx.put(\"hwm\", next)\n      const data = await send([\n        getEvents(ctx.self(), hwm.height, next.height - 1),\n      ]).then(decode)\n      for (let d of data) ctx.broadcast(UPDATED, d.data)\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    }\n  },\n  [SUBSCRIBE]: async (ctx, letter) => {\n    if (!ctx.hasSubs()) {\n      ctx.put(\"tick\", await scheduleTick(ctx))\n    }\n    ctx.subscribe(letter.from)\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n    if (!ctx.hasSubs()) {\n      clearTimeout(ctx.get(\"tick\"))\n      ctx.delete(\"tick\")\n      ctx.delete(\"hwm\")\n    }\n  },\n}\n\nconst spawnEvents = key => spawn(HANDLERS, key)\n\nexport function events(key) {\n  return {\n    subscribe: callback => subscriber(key, spawnEvents, callback),\n  }\n}\n","export const SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const PROVIDER_PRAGME = {\n  f_type: \"Provider\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const OPEN_ID_PRAGME = {\n  f_type: \"OpenId\",\n  f_vsn: \"1.0.0\",\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"frame\",\n//    \"endpoint\": \"https://rawr\",\n//    \"data\": {},   // Sent to frame when ready\n//    \"params\": {}, // include in query params on frame\n// }\nexport function normalizeFrame(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        old: service,\n        ...SERVICE_PRAGMA,\n        type: \"frame\",\n        endpoint: service.endpoint,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"back-channel-rpc\",\n//    \"endpoint\": \"https://rawr\",\n//    \"method\": \"HTTP/GET\", // HTTP/GET | HTTP/POST\n//    \"data\": {},           // included in body of rpc\n//    \"params\": {},         // included as query params on endpoint url\n// }\nexport function normalizeBackChannelRpc(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: \"back-channel-rpc\",\n        endpoint: service.endpoint,\n        method: service.method,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {normalizeAuthn} from \"./authn\"\nimport {normalizeAuthz} from \"./authz\"\nimport {normalizePreAuthz} from \"./pre-authz\"\nimport {normalizeFrame} from \"./frame\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeOpenId} from \"./open-id\"\n\nexport function normalizeServices(services, data) {\n  return services.map(service => normalizeService(service, data))\n}\n\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n}\n\nexport function normalizeService(service, data) {\n  try {\n    var normalized = serviceNormalizers[service.type](service, data)\n    // console.log(service.type, {normalized, service})\n    return normalized\n  } catch (error) {\n    console.error(\n      `Unrecognized FCL Service Type [${service.type}]`,\n      service,\n      error\n    )\n    return service\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"pre-authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of pre-authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizePreAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"identity\": {\n//     \"address\": \"0x____\"\n//   },\n//   \"provider\": {\n//     \"address\": \"0x____\",\n//     \"name\": \"Best Wallet\",\n//     \"description\": \"The Best Wallet\"\n//     \"icon\": \"https://\",\n//   }\n// }\nexport function normalizeAuthn(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.authn,\n        id: service.pid,\n        provider: {\n          address: withPrefix(service.addr),\n          name: service.name,\n          icon: service.icon,\n        },\n      }\n  }\n}\n","import {SERVICE_PRAGMA, OPEN_ID_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"open-id\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"method: \"data\",\n//   \"data\": {\n//      \"profile\": {\n//        \"name\": \"Bob\",\n//        \"family_name\": \"Builder\",\n//        \"given_name\": \"Robert\",\n//        \"middle_name\": \"the\",\n//        \"nickname\": \"Bob the Builder\",\n//        \"perferred_username\": \"bob\",\n//        \"profile\": \"https://www.bobthebuilder.com/\",\n//        \"picture\": \"https://avatars.onflow.org/avatar/bob\",\n//        \"gender\": \"...\",\n//        \"birthday\": \"2001-01-18\",\n//        \"zoneinfo\": \"America/Vancouver\",\n//        \"locale\": \"en-us\",\n//        \"updated_at\": \"1614970797388\"\n//      },\n//      \"email\": {\n//        \"email\": \"bob@bob.bob\",\n//        \"email_verified\": true\n//      },\n//      \"address\": {\n//        \"address\": \"One Apple Park Way, Cupertino, CA 95014, USA\"\n//      },\n//      \"phone\": {\n//        \"phone_number\": \"+1 (xxx) yyy-zzzz\",\n//        \"phone_number_verified\": true\n//      },\n//      \"social\": {\n//        \"twitter\": \"@_qvvg\",\n//        \"twitter_verified\": true\n//      },\n//   }\n// }\nexport function normalizeOpenId(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return null\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport * as rlp from \"@onflow/rlp\"\nimport {fetchServices} from \"./fetch-services\"\nimport {mergeServices} from \"./merge-services\"\nimport {USER_PRAGMA} from \"./normalize/__vsn\"\nimport {normalizeService} from \"./normalize/service\"\n\nfunction deriveCompositeId(authn) {\n  return rlp\n    .encode([\n      authn.provider.address || authn.provider.name || \"UNSPECIFIED\",\n      authn.id,\n    ])\n    .toString(\"hex\")\n}\n\nfunction normalizeData(data) {\n  data.addr = data.addr ? withPrefix(data.addr) : null\n  data.paddr = data.paddr ? withPrefix(data.paddr) : null\n  return data\n}\n\nfunction findService(type, services) {\n  return services.find(d => d.type === type)\n}\n\nexport async function buildUser(data) {\n  data = normalizeData(data)\n\n  var services = mergeServices(\n    data.services || [],\n    await fetchServices(data.hks, data.code)\n  ).map(service => normalizeService(service, data))\n\n  const authn = findService(\"authn\", services)\n\n  return {\n    ...USER_PRAGMA,\n    addr: withPrefix(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.exp,\n  }\n}\n","export function serviceOfType(services = [], type) {\n  return services.find(service => service.type === type)\n}\n","export function serviceEndpoint(service) {\n  const url = new URL(service.endpoint)\n  url.searchParams.append(\"l6n\", window.location.origin)\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value)\n    }\n  }\n  return url\n}\n","import {serviceEndpoint} from \"./service-endpoint\"\n\nexport function fetchService(service, opts = {}) {\n  const method = opts.method || \"POST\"\n  const body =\n    method === \"GET\"\n      ? undefined\n      : JSON.stringify(opts.data || service.data || {})\n\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\",\n    },\n    body: body,\n  }).then((d) => d.json())\n}\n","import {POLLING_RESPONSE_PRAGMA} from \"./__vsn\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeFrame} from \"./frame\"\n\n// {\n//    \"f_type\": \"PollingResponse\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"status\": \"PENDING\", // PENDING | APPROVED | DECLINED\n//    \"reason\": null,      // Reason for Declining Transaction\n//    \"data\": null,        // Return value for APPROVED\n//    \"updates\": BackChannelRpc,\n//    \"local\": Frame,\n// }\nexport function normalizePollingResponse(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...POLLING_RESPONSE_PRAGMA,\n        status: resp.status,\n        reason: resp.reason,\n        data: resp.compositeSignature || resp.data || {},\n        updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n        local: normalizeFrame((resp.local || [])[0]),\n      }\n  }\n}\n","import {COMPOSITE_SIGNATURE_PRAGMA} from \"./__vsn\"\nimport {sansPrefix} from \"@onflow/util-address\"\n\n// {\n//    \"f_type\": \"CompositeSignature\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"addr\": \"_____\",         // sans-prefix\n//    \"signature\": \"adfe1234\", // hex\n//    \"keyId\": 3,\n// }\nexport function normalizeCompositeSignature(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...COMPOSITE_SIGNATURE_PRAGMA,\n        addr: sansPrefix(resp.addr || resp.address),\n        signature: resp.signature || resp.sig,\n        keyId: resp.keyId,\n      }\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\n\nconst FRAME = \"FCL_IFRAME\"\n\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100vh;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n`\n\nexport function renderFrame(src) {\n  invariant(\n    !document.getElementById(FRAME),\n    \"Attempt at triggering multiple Frames\",\n    {src}\n  )\n\n  const $frame = document.createElement(\"iframe\")\n  $frame.src = src\n  $frame.id = FRAME\n  $frame.allow = \"usb *\"\n  $frame.frameBorder = \"0\"\n  $frame.style.cssText = FRAME_STYLES\n  document.body.append($frame)\n\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove()\n    }\n  }\n\n  return [$frame, unmount]\n}\n","import {renderFrame} from \"./render-frame\"\nimport {serviceEndpoint} from \"./service-endpoint\"\n\nconst CLOSE_EVENT = \"FCL:FRAME:CLOSE\"\nconst READY_EVENT = \"FCL:FRAME:READY\"\nconst RESPONSE_EVENT = \"FCL:FRAME:RESPONSE\"\nconst OPEN_EVENT = \"FCL:FRAME:OPEN\"\n\nconst noop = () => {}\n\nconst IGNORE = new Set([\n  \"monetizationstart\",\n  \"monetizationpending\",\n  \"monetizationprogress\",\n  \"monetizationstop\",\n])\n\nexport function frame(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  var tab = null\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  window.addEventListener(\"message\", internal)\n  const [$frame, unmount] = renderFrame(serviceEndpoint(service))\n  return {send, close}\n\n  function internal(e) {\n    try {\n      if (typeof e.data !== \"object\") return\n      // if (e.data.type == null) return\n      if (IGNORE.has(e.data.type)) return\n      if (e.data.type === CLOSE_EVENT) close()\n      if (e.data.type === READY_EVENT) onReady(e, {send, close})\n      if (e.data.type === RESPONSE_EVENT) onResponse(e, {send, close})\n      onMessage(e, {send, close})\n\n      // Backwards Compatible\n      if (e.data.type === \"FCL::CHALLENGE::RESPONSE\") {\n        onResponse(e, {send, close})\n      }\n      if (e.data.type === \"FCL::AUTHZ_READY\") onReady(e, {send, close})\n      if (e.data.type === \"FCL::CHALLENGE::CANCEL\") close()\n      if (e.data.type === \"FCL::CANCEL\") close()\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error)\n      close()\n    }\n  }\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", internal)\n      if (tab != null) tab.close()\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Frame Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      // console.log(\"SEND\", msg)\n      $frame.contentWindow.postMessage(\n        JSON.parse(JSON.stringify(msg || {})),\n        \"*\"\n      )\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error)\n    }\n  }\n\n  function open(msg) {\n    try {\n      tab = window.open(msg.endpoint)\n      tab.focus()\n    } catch (error) {\n      console.error(\"Frame Open Error\", msg, error)\n    }\n  }\n}\n","import {normalizePollingResponse} from \"../../../normalize/polling-response\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {fetchService} from \"./fetch-service\"\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\",\n}\n\nconst serviceMethod = service => {\n  invariant(\n    OPTIONS[service.method],\n    \"Invalid Service Method for type back-channel-rpc\",\n    {service}\n  )\n  return OPTIONS[service.method]\n}\n\nconst serviceBody = service => {\n  if (service.method === \"HTTP/GET\") return undefined\n  if (service.method === \"HTTP/POST\" && service.data != null)\n    return JSON.stringify(service.data)\n  return undefined\n}\n\nexport async function poll(service, canContinue = () => true) {\n  invariant(service, \"Missing Polling Service\", {service})\n  if (!canContinue()) throw new Error(\"Externally Halted\")\n\n  const resp = await fetchService(service, {\n    method: serviceMethod(service),\n  }).then(normalizePollingResponse)\n\n  switch (resp.status) {\n    case \"APPROVED\":\n      return resp.data\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n    default:\n      await new Promise(r => setTimeout(r, 500))\n      return poll(resp.updates, canContinue)\n  }\n}\n","import {fetchService} from \"./utils/fetch-service\"\nimport {serviceEndpoint} from \"./utils/service-endpoint\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {normalizeCompositeSignature} from \"../../normalize/composite-signature\"\nimport {frame} from \"./utils/frame\"\nimport {poll} from \"./utils/poll\"\n\nexport async function execHttpPost(service, signable) {\n  signable.data = service.data\n  const resp = await fetchService(service, {\n    data: signable,\n  }).then(normalizePollingResponse)\n\n  if (resp.status === \"APPROVED\") {\n    return resp.data\n  } else if (resp.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n  } else if (resp.status === \"PENDING\") {\n    var canContinue = true\n    const {close: closeFrame} = frame(resp.local, {\n      onClose() {\n        canContinue = false\n      },\n    })\n\n    return poll(resp.updates, () => canContinue)\n      .then(compositeSignature => {\n        closeFrame()\n        return normalizeCompositeSignature(compositeSignature)\n      })\n      .catch(error => {\n        console.error(error)\n        closeFrame()\n        throw error\n      })\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {service, resp})\n    throw new Error(`Auto Decline: Invalid Response`)\n  }\n}\n","import {execHttpPost} from \"./strategies/http-post\"\nimport {execIframeRPC} from \"./strategies/iframe-rpc\"\n\nconst STRATEGIES = {\n  \"HTTP/RPC\": execHttpPost,\n  \"HTTP/POST\": execHttpPost,\n  \"IFRAME/RPC\": execIframeRPC,\n}\n\nexport async function execService(service, msg) {\n  try {\n    return STRATEGIES[service.method](service, msg)\n  } catch (error) {\n    console.error(\"execService(service, msg)\", error, {service, msg})\n    throw error\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {frame} from \"./utils/frame\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {normalizeCompositeSignature} from \"../../normalize/composite-signature\"\n\nexport function execIframeRPC(service, signable) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    signable.data = service.data\n\n    frame(service, {\n      onReady(_, {send}) {\n        try {\n          // This is out of place, we need to find an alternative\n          send({\n            jsonrpc: \"2.0\",\n            id: id,\n            method: \"fcl:sign\",\n            params: [signable, service.params],\n          })\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(normalizeCompositeSignature(resp.data))\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error)\n          throw error\n        }\n      },\n    })\n  })\n}\n","import \"../default-config\"\nimport {account} from \"@onflow/sdk\"\nimport {config} from \"@onflow/config\"\nimport {spawn, send, INIT, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {buildUser} from \"./build-user\"\nimport {serviceOfType} from \"./service-of-type\"\nimport {execService} from \"./exec-service\"\nimport {frame} from \"./exec-service/strategies/utils/frame\"\n\nconst NAME = \"CURRENT_USER\"\nconst UPDATED = \"CURRENT_USER/UPDATED\"\nconst SNAPSHOT = \"SNAPSHOT\"\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\"\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\"\n\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`\n\nconst coldStorage = {\n  get: async () => {\n    const fallback = JSON.parse(DATA)\n    const stored = JSON.parse(sessionStorage.getItem(NAME))\n    if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n      sessionStorage.removeItem(NAME)\n      return fallback\n    }\n    return stored || fallback\n  },\n  put: async data => {\n    sessionStorage.setItem(NAME, JSON.stringify(data))\n    return data\n  },\n}\n\nconst canColdStorage = () => {\n  return config().get(\"persistSession\", true)\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    ctx.merge(JSON.parse(DATA))\n    if (await canColdStorage()) {\n      const user = await coldStorage.get()\n      if (notExpired(user)) ctx.merge(user)\n    }\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply({...ctx.all()})\n  },\n  [SET_CURRENT_USER]: async (ctx, letter, data) => {\n    ctx.merge(data)\n    if (await canColdStorage()) coldStorage.put(ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [DEL_CURRENT_USER]: async (ctx, letter) => {\n    ctx.merge(JSON.parse(DATA))\n    if (await canColdStorage()) coldStorage.put(ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n}\n\nconst identity = v => v\nconst spawnCurrentUser = () => spawn(HANDLERS, NAME)\n\nfunction notExpired(user) {\n  return (\n    user.expiresAt == null ||\n    user.expiresAt === 0 ||\n    user.expiresAt > Date.now()\n  )\n}\n\nasync function configLens(regex) {\n  return Object.fromEntries(\n    Object.entries(await config().where(regex)).map(([key, value]) => [\n      key.replace(regex, \"\"),\n      value,\n    ])\n  )\n}\n\nasync function authenticate() {\n  return new Promise(async (resolve, reject) => {\n    spawnCurrentUser()\n    const user = await snapshot()\n    if (user.loggedIn && notExpired(user)) return resolve(user)\n\n    frame(\n      {\n        endpoint:\n          (await config().get(\"discovery.wallet\")) ||\n          (await config().get(\"challenge.handshake\")),\n      },\n      {\n        async onReady(e, {send, close}) {\n          send({\n            type: \"FCL:AUTHN:CONFIG\",\n            services: await configLens(/^service\\./),\n            app: await configLens(/^app\\.detail\\./),\n          })\n        },\n        async onClose() {\n          resolve(await snapshot())\n        },\n        async onResponse(e, {close}) {\n          send(NAME, SET_CURRENT_USER, await buildUser(e.data))\n          resolve(await snapshot())\n          close()\n        },\n      }\n    )\n  })\n}\n\nfunction unauthenticate() {\n  spawnCurrentUser()\n  send(NAME, DEL_CURRENT_USER)\n}\n\nconst normalizePreAuthzResponse = authz => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || [],\n})\n\nfunction resolvePreAuthz(authz) {\n  const resp = normalizePreAuthzResponse(authz)\n  const axs = []\n\n  if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer])\n  for (let az of resp.payer || []) axs.push([\"PAYER\", az])\n  for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az])\n\n  var result = axs.map(([role, az]) => ({\n    tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n    addr: az.identity.address,\n    keyId: az.identity.keyId,\n    signingFunction(signable) {\n      return execService(az, signable)\n    },\n    role: {\n      proposer: role === \"PROPOSER\",\n      payer: role === \"PAYER\",\n      authorizer: role === \"AUTHORIZER\",\n    },\n  }))\n  return result\n}\n\nasync function authorization(account) {\n  spawnCurrentUser()\n  const user = await authenticate()\n  const authz = serviceOfType(user.services, \"authz\")\n\n  const preAuthz = serviceOfType(user.services, \"pre-authz\")\n  if (preAuthz) {\n    return {\n      ...account,\n      tempId: \"CURRENT_USER\",\n      async resolve(account, preSignable) {\n        return resolvePreAuthz(await execService(preAuthz, preSignable))\n      },\n    }\n  }\n\n  return {\n    ...account,\n    tempId: \"CURRENT_USER\",\n    resolve: null,\n    addr: sansPrefix(authz.identity.address),\n    keyId: authz.identity.keyId,\n    sequenceNum: null,\n    signature: null,\n    async signingFunction(signable) {\n      return execService(authz, signable)\n    },\n  }\n}\n\nfunction subscribe(callback) {\n  spawnCurrentUser()\n  const EXIT = \"@EXIT\"\n  const self = spawn(async ctx => {\n    ctx.send(NAME, SUBSCRIBE)\n    while (1) {\n      const letter = await ctx.receive()\n      if (letter.tag === EXIT) {\n        ctx.send(NAME, UNSUBSCRIBE)\n        return\n      }\n      callback(letter.data)\n    }\n  })\n  return () => send(self, EXIT)\n}\n\nfunction snapshot() {\n  spawnCurrentUser()\n  return send(NAME, SNAPSHOT, null, {expectReply: true, timeout: 0})\n}\n\nasync function info() {\n  spawnCurrentUser()\n  const {addr} = await snapshot()\n  if (addr == null) throw new Error(\"No Flow Address for Current User\")\n  return account(addr)\n}\n\nexport const currentUser = () => {\n  return {\n    authenticate,\n    unauthenticate,\n    authorization,\n    subscribe,\n    snapshot,\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\n\nexport function mergeServices(sx1 = [], sx2 = []) {\n  // TODO: Make this smarter\n  return [...sx1, ...sx2]\n}\n","export async function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return []\n\n  const url = new URL(servicesURL)\n  url.searchParams.append(\"code\", code)\n\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  }).then(d => d.json())\n\n  if (Array.isArray(resp)) return resp\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = []\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service,\n      })\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider,\n    })\n  }\n\n  return services\n}\n","import \"./default-config\"\nimport \"./temp\"\nexport {VERSION} from \"./VERSION\"\nexport {query} from \"./exec/query\"\nexport {serialize} from \"./serialize\"\nexport {transaction as tx} from \"./transaction\"\nexport {events} from \"./events\"\n\nimport {currentUser} from \"./current-user\"\nexport {currentUser}\n\nexport const authenticate = () => currentUser().authenticate()\nexport const unauthenticate = () => currentUser().unauthenticate()\nexport const reauthenticate = () => {\n  currentUser().unauthenticate()\n  return currentUser().authenticate()\n}\nexport const signUp = () => currentUser().authenticate()\nexport const logIn = () => currentUser().authenticate()\n\nexport const authz = currentUser().authorization\n\nimport * as types from \"@onflow/types\"\nexport const t = types\n\nexport {config} from \"@onflow/config\"\nexport {send} from \"@onflow/sdk\"\nexport {decode} from \"@onflow/sdk\"\nexport {account} from \"@onflow/sdk\"\nexport {latestBlock} from \"@onflow/sdk\"\nexport {isOk, isBad, why, pipe, build} from \"@onflow/sdk\"\nexport {withPrefix, sansPrefix, display} from \"@onflow/util-address\"\nexport {template as cadence} from \"@onflow/util-template\"\nexport {template as cdc} from \"@onflow/util-template\"\n\n// builders\nexport {transaction} from \"@onflow/sdk\"\nexport {script} from \"@onflow/sdk\"\nexport {ping} from \"@onflow/sdk\"\nexport {atBlockHeight} from \"@onflow/sdk\"\nexport {atBlockId} from \"@onflow/sdk\"\nexport {getAccount} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nexport {getEventsAtBlockHeightRange} from \"@onflow/sdk\"\nexport {getEventsAtBlockIds} from \"@onflow/sdk\"\nexport {getLatestBlock} from \"@onflow/sdk\"\nexport {getBlock} from \"@onflow/sdk\"\nexport {getBlockHeader} from \"@onflow/sdk\"\nexport {getBlockById} from \"@onflow/sdk\"\nexport {getBlockByHeight} from \"@onflow/sdk\"\nexport {getCollection} from \"@onflow/sdk\"\nexport {getTransactionStatus} from \"@onflow/sdk\"\nexport {getTransaction} from \"@onflow/sdk\"\nexport {authorizations, authorization} from \"@onflow/sdk\"\nexport {args, arg} from \"@onflow/sdk\"\nexport {proposer} from \"@onflow/sdk\"\nexport {payer} from \"@onflow/sdk\"\nexport {limit} from \"@onflow/sdk\"\nexport {ref} from \"@onflow/sdk\"\nexport {params, param} from \"@onflow/sdk\"\nexport {validator} from \"@onflow/sdk\"\nexport {invariant} from \"@onflow/sdk\"\n"],"names":["config","put","resolve","VERSION","async","query","opts","invariant","cadence","d","isString","preQuery","sdk","ax","args","t","limit","then","serialize","resolveFunction","get","defaultResolve","Array","isArray","pipe","interaction","JSON","stringify","fetchTxStatus","fclSend","getTransactionStatus","transactionId","decode","isSealed","tx","status","isExecuted","isFinalized","HANDLERS","[object Object]","INIT","ctx","self","setTimeout","sendSelf","merge","SUBSCRIBE","letter","subscribe","from","send","UPDATED","all","UNSUBSCRIBE","unsubscribe","SNAPSHOT","reply","POLL","cur","next","broadcast","scoped","Error","spawnTransaction","spawn","transaction","callback","subscriber","once","predicate","suppress","Promise","reject","unsub","txStatus","statusCode","errorMessage","snapshot","snapshoter","onceFinalized","onceExecuted","onceSealed","isUnknown","isPending","isExpired","scheduleTick","TICK","hasSubs","hwm","latestBlock","data","getEvents","height","clearTimeout","delete","spawnEvents","key","events","SERVICE_PRAGMA","f_type","f_vsn","IDENTITY_PRAGMA","USER_PRAGMA","POLLING_RESPONSE_PRAGMA","COMPOSITE_SIGNATURE_PRAGMA","normalizeFrame","service","old","type","endpoint","params","normalizeBackChannelRpc","method","serviceNormalizers","back-channel-rpc","pre-authz","uid","id","identity","address","withPrefix","addr","keyId","authz","authn","pid","provider","name","icon","frame","open-id","deriveCompositeId","rlp","toString","serviceOfType","services","find","serviceEndpoint","url","URL","searchParams","append","window","location","origin","value","Object","entries","fetchService","body","undefined","fetch","headers","Content-Type","json","normalizePollingResponse","resp","reason","compositeSignature","updates","authorizationUpdates","local","normalizeCompositeSignature","sansPrefix","signature","sig","FRAME","noop","IGNORE","Set","close","onClose","onMessage","onReady","onResponse","addEventListener","internal","$frame","unmount","src","document","getElementById","createElement","allow","frameBorder","style","cssText","remove","renderFrame","e","has","error","console","removeEventListener","msg","contentWindow","postMessage","parse","OPTIONS","HTTP/GET","HTTP/POST","serviceMethod","execHttpPost","signable","canContinue","closeFrame","poll","r","catch","STRATEGIES","HTTP/RPC","IFRAME/RPC","_","jsonrpc","result","execService","NAME","DATA","coldStorage","sessionStorage","setItem","canColdStorage","user","fallback","stored","getItem","removeItem","notExpired","SET_CURRENT_USER","DEL_CURRENT_USER","spawnCurrentUser","expiresAt","Date","now","configLens","regex","fromEntries","where","map","replace","authenticate","loggedIn","app","sx1","sx2","mergeServices","paddr","normalizeData","servicesURL","code","authorizations","push","fetchServices","hks","normalizeService","findService","cid","exp","buildUser","unauthenticate","authorization","account","preAuthz","tempId","preSignable","proposer","payer","normalizePreAuthzResponse","axs","az","role","join","signingFunction","authorizer","resolvePreAuthz","sequenceNum","receive","tag","expectReply","timeout","currentUser","reauthenticate","signUp","logIn","types"],"mappings":"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"}