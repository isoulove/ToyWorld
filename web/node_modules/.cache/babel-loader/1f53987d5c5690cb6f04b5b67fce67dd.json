{"ast":null,"code":"import * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { tx } from \"./util/tx\";\nimport { invariant } from \"@onflow/util-invariant\";\nconst CODE = fcl.cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import Kibble from 0xKibble\n  import KittyItems from 0xKittyItems\n  import KittyItemsMarket from 0xKittyItemsMarket\n\n  transaction(itemID: UInt64, marketCollectionAddress: Address) {\n      let paymentVault: @FungibleToken.Vault\n      let kittyItemsCollection: &KittyItems.Collection{NonFungibleToken.Receiver}\n      let marketCollection: &KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}\n\n      prepare(acct: AuthAccount) {\n          self.marketCollection = getAccount(marketCollectionAddress)\n              .getCapability<&KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}>(KittyItemsMarket.CollectionPublicPath)\n              .borrow() ?? panic(\"Could not borrow market collection from market address\")\n\n          let price = self.marketCollection.borrowSaleItem(itemID: itemID)!.price\n\n          let mainKibbleVault = acct.borrow<&Kibble.Vault>(from: Kibble.VaultStoragePath)\n              ?? panic(\"Cannot borrow Kibble vault from acct storage\")\n          self.paymentVault <- mainKibbleVault.withdraw(amount: price)\n\n          self.kittyItemsCollection = acct.borrow<&KittyItems.Collection{NonFungibleToken.Receiver}>(\n              from: KittyItems.CollectionStoragePath\n          ) ?? panic(\"Cannot borrow KittyItems collection receiver from acct\")\n      }\n\n      execute {\n          self.marketCollection.purchase(\n              itemID: itemID,\n              buyerCollection: self.kittyItemsCollection,\n              buyerPayment: <- self.paymentVault\n          )\n      }\n  }\n`; // prettier-ignore\n\nexport function buyMarketItem({\n  itemID,\n  ownerAddress\n}, opts = {}) {\n  invariant(itemID != null, \"buyMarketItem({itemID, ownerAddress}) -- itemID required\");\n  invariant(ownerAddress != null, \"buyMarketItem({itemID, ownerAddress}) -- ownerAddress required\");\n  return tx([fcl.transaction(CODE), fcl.args([fcl.arg(Number(itemID), t.UInt64), fcl.arg(String(ownerAddress), t.Address)]), fcl.proposer(fcl.authz), fcl.payer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.limit(1000)], opts);\n}","map":{"version":3,"sources":["/Users/wuchao/flow/nft/ToyWorld/web/src/flow/buy-market-item.tx.js"],"names":["fcl","t","tx","invariant","CODE","cdc","buyMarketItem","itemID","ownerAddress","opts","transaction","args","arg","Number","UInt64","String","Address","proposer","authz","payer","authorizations","limit"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,SAAQC,EAAR,QAAiB,WAAjB;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AAEA,MAAMC,IAAI,GAAGJ,GAAG,CAACK,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApCA,C,CAsCA;;AACA,OAAO,SAASC,aAAT,CAAuB;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAvB,EAA+CC,IAAI,GAAG,EAAtD,EAA0D;AAC/DN,EAAAA,SAAS,CAACI,MAAM,IAAI,IAAX,EAAiB,0DAAjB,CAAT;AACAJ,EAAAA,SAAS,CAACK,YAAY,IAAI,IAAjB,EAAuB,gEAAvB,CAAT;AAEA,SAAON,EAAE,CAAC,CACRF,GAAG,CAACU,WAAJ,CAAgBN,IAAhB,CADQ,EAERJ,GAAG,CAACW,IAAJ,CAAS,CACPX,GAAG,CAACY,GAAJ,CAAQC,MAAM,CAACN,MAAD,CAAd,EAAwBN,CAAC,CAACa,MAA1B,CADO,EAEPd,GAAG,CAACY,GAAJ,CAAQG,MAAM,CAACP,YAAD,CAAd,EAA8BP,CAAC,CAACe,OAAhC,CAFO,CAAT,CAFQ,EAMRhB,GAAG,CAACiB,QAAJ,CAAajB,GAAG,CAACkB,KAAjB,CANQ,EAORlB,GAAG,CAACmB,KAAJ,CAAUnB,GAAG,CAACkB,KAAd,CAPQ,EAQRlB,GAAG,CAACoB,cAAJ,CAAmB,CAACpB,GAAG,CAACkB,KAAL,CAAnB,CARQ,EASRlB,GAAG,CAACqB,KAAJ,CAAU,IAAV,CATQ,CAAD,EAUNZ,IAVM,CAAT;AAWD","sourcesContent":["import * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\nimport {tx} from \"./util/tx\"\nimport {invariant} from \"@onflow/util-invariant\"\n\nconst CODE = fcl.cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import Kibble from 0xKibble\n  import KittyItems from 0xKittyItems\n  import KittyItemsMarket from 0xKittyItemsMarket\n\n  transaction(itemID: UInt64, marketCollectionAddress: Address) {\n      let paymentVault: @FungibleToken.Vault\n      let kittyItemsCollection: &KittyItems.Collection{NonFungibleToken.Receiver}\n      let marketCollection: &KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}\n\n      prepare(acct: AuthAccount) {\n          self.marketCollection = getAccount(marketCollectionAddress)\n              .getCapability<&KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}>(KittyItemsMarket.CollectionPublicPath)\n              .borrow() ?? panic(\"Could not borrow market collection from market address\")\n\n          let price = self.marketCollection.borrowSaleItem(itemID: itemID)!.price\n\n          let mainKibbleVault = acct.borrow<&Kibble.Vault>(from: Kibble.VaultStoragePath)\n              ?? panic(\"Cannot borrow Kibble vault from acct storage\")\n          self.paymentVault <- mainKibbleVault.withdraw(amount: price)\n\n          self.kittyItemsCollection = acct.borrow<&KittyItems.Collection{NonFungibleToken.Receiver}>(\n              from: KittyItems.CollectionStoragePath\n          ) ?? panic(\"Cannot borrow KittyItems collection receiver from acct\")\n      }\n\n      execute {\n          self.marketCollection.purchase(\n              itemID: itemID,\n              buyerCollection: self.kittyItemsCollection,\n              buyerPayment: <- self.paymentVault\n          )\n      }\n  }\n`\n\n// prettier-ignore\nexport function buyMarketItem({itemID, ownerAddress}, opts = {}) {\n  invariant(itemID != null, \"buyMarketItem({itemID, ownerAddress}) -- itemID required\")\n  invariant(ownerAddress != null, \"buyMarketItem({itemID, ownerAddress}) -- ownerAddress required\")\n\n  return tx([\n    fcl.transaction(CODE),\n    fcl.args([\n      fcl.arg(Number(itemID), t.UInt64),\n      fcl.arg(String(ownerAddress), t.Address),\n    ]),\n    fcl.proposer(fcl.authz),\n    fcl.payer(fcl.authz),\n    fcl.authorizations([fcl.authz]),\n    fcl.limit(1000),\n  ], opts)\n}\n"]},"metadata":{},"sourceType":"module"}