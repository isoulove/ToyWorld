{"ast":null,"code":"import * as fcl from \"@onflow/fcl\";\nimport { Address } from \"@onflow/types\";\nconst CODE = fcl.cdc`\n  import NonFungibleToken from 0xNonFungibleToken\n  import KittyItems from 0xKittyItems\n\n  pub fun main(address: Address): [UInt64] {\n    if let collection =  getAccount(address).getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath).borrow() {\n      return collection.getIDs()\n    }\n\n    return []\n  }\n`;\nexport function fetchAccountItems(address) {\n  if (address == null) return Promise.resolve([]); // prettier-ignore\n\n  return fcl.send([fcl.script(CODE), fcl.args([fcl.arg(address, Address)])]).then(fcl.decode).then(d => d.sort((a, b) => a - b));\n}","map":{"version":3,"sources":["/Users/wuchao/flow/nft/ToyWorld/web/src/flow/fetch-account-items.script.js"],"names":["fcl","Address","CODE","cdc","fetchAccountItems","address","Promise","resolve","send","script","args","arg","then","decode","d","sort","a","b"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AAEA,MAAMC,IAAI,GAAGF,GAAG,CAACG,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAaA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,MAAIA,OAAO,IAAI,IAAf,EAAqB,OAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP,CADoB,CAGzC;;AACA,SAAOP,GAAG,CAACQ,IAAJ,CAAS,CACdR,GAAG,CAACS,MAAJ,CAAWP,IAAX,CADc,EAEdF,GAAG,CAACU,IAAJ,CAAS,CACPV,GAAG,CAACW,GAAJ,CAAQN,OAAR,EAAiBJ,OAAjB,CADO,CAAT,CAFc,CAAT,EAKJW,IALI,CAKCZ,GAAG,CAACa,MALL,EAKaD,IALb,CAKkBE,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAO,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAArB,CALvB,CAAP;AAMD","sourcesContent":["import * as fcl from \"@onflow/fcl\"\nimport {Address} from \"@onflow/types\"\n\nconst CODE = fcl.cdc`\n  import NonFungibleToken from 0xNonFungibleToken\n  import KittyItems from 0xKittyItems\n\n  pub fun main(address: Address): [UInt64] {\n    if let collection =  getAccount(address).getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath).borrow() {\n      return collection.getIDs()\n    }\n\n    return []\n  }\n`\n\nexport function fetchAccountItems(address) {\n  if (address == null) return Promise.resolve([])\n\n  // prettier-ignore\n  return fcl.send([\n    fcl.script(CODE),\n    fcl.args([\n      fcl.arg(address, Address)\n    ]),\n  ]).then(fcl.decode).then(d => d.sort((a, b) => a - b))\n}\n"]},"metadata":{},"sourceType":"module"}