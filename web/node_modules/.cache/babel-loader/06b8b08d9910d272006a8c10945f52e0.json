{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { atom, useRecoilState } from \"recoil\";\nimport useSWR from \"swr\";\nimport { IDLE, LOADING } from \"../global/constants\";\nimport fetcher from \"../util/fetcher\";\nimport normalizeItem from \"../util/normalize-item\";\nexport const $marketItemsState = atom({\n  key: \"market-items::state\",\n  default: []\n});\nexport const $marketItemsStatus = atom({\n  key: \"market-items::status\",\n  default: IDLE\n});\nexport function useMarketItems() {\n  _s();\n\n  const url = process.env.REACT_APP_API_MARKET_ITEMS_LIST;\n  const [status, setStatus] = useRecoilState($marketItemsStatus);\n  const [items, setItems] = useRecoilState($marketItemsState);\n  useSWR(url, fetcher, {\n    initialData: items,\n    refreshInterval: 10,\n    onLoadingSlow: () => {\n      setStatus(LOADING);\n    },\n    onSuccess: ({\n      latestSaleOffers\n    }) => {\n      setItems(latestSaleOffers.map(item => normalizeItem(item)));\n      setStatus(IDLE);\n    },\n    onError: error => {\n      console.log(\"Failed to fetch market items.\", error);\n    }\n  });\n  const asMap = new Map(items.map(item => [item.itemID, item]));\n  return {\n    status,\n    items,\n\n    has(item) {\n      return asMap.has(item.itemID);\n    }\n\n  };\n}\n\n_s(useMarketItems, \"HfJ2HM/NZdkQkYL/E7nlEjHg8+I=\", false, function () {\n  return [useRecoilState, useRecoilState, useSWR];\n});","map":{"version":3,"sources":["/Users/wuchao/flow/nft/ToyWorld/web/src/hooks/use-market-items.hook.js"],"names":["atom","useRecoilState","useSWR","IDLE","LOADING","fetcher","normalizeItem","$marketItemsState","key","default","$marketItemsStatus","useMarketItems","url","process","env","REACT_APP_API_MARKET_ITEMS_LIST","status","setStatus","items","setItems","initialData","refreshInterval","onLoadingSlow","onSuccess","latestSaleOffers","map","item","onError","error","console","log","asMap","Map","itemID","has"],"mappings":";;AAAA,SAAQA,IAAR,EAAcC,cAAd,QAAmC,QAAnC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAAQC,IAAR,EAAcC,OAAd,QAA4B,qBAA5B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AAEA,OAAO,MAAMC,iBAAiB,GAAGP,IAAI,CAAC;AACpCQ,EAAAA,GAAG,EAAE,qBAD+B;AAEpCC,EAAAA,OAAO,EAAE;AAF2B,CAAD,CAA9B;AAKP,OAAO,MAAMC,kBAAkB,GAAGV,IAAI,CAAC;AACrCQ,EAAAA,GAAG,EAAE,sBADgC;AAErCC,EAAAA,OAAO,EAAEN;AAF4B,CAAD,CAA/B;AAKP,OAAO,SAASQ,cAAT,GAA0B;AAAA;;AAC/B,QAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,+BAAxB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,cAAc,CAACS,kBAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBlB,cAAc,CAACM,iBAAD,CAAxC;AAEAL,EAAAA,MAAM,CAACU,GAAD,EAAMP,OAAN,EAAe;AACnBe,IAAAA,WAAW,EAAEF,KADM;AAEnBG,IAAAA,eAAe,EAAE,EAFE;AAGnBC,IAAAA,aAAa,EAAE,MAAM;AACnBL,MAAAA,SAAS,CAACb,OAAD,CAAT;AACD,KALkB;AAMnBmB,IAAAA,SAAS,EAAE,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAwB;AACjCL,MAAAA,QAAQ,CAACK,gBAAgB,CAACC,GAAjB,CAAqBC,IAAI,IAAIpB,aAAa,CAACoB,IAAD,CAA1C,CAAD,CAAR;AACAT,MAAAA,SAAS,CAACd,IAAD,CAAT;AACD,KATkB;AAUnBwB,IAAAA,OAAO,EAAEC,KAAK,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,KAA7C;AACD;AAZkB,GAAf,CAAN;AAeA,QAAMG,KAAK,GAAG,IAAIC,GAAJ,CAAQd,KAAK,CAACO,GAAN,CAAUC,IAAI,IAAI,CAACA,IAAI,CAACO,MAAN,EAAcP,IAAd,CAAlB,CAAR,CAAd;AAEA,SAAO;AACLV,IAAAA,MADK;AAELE,IAAAA,KAFK;;AAGLgB,IAAAA,GAAG,CAACR,IAAD,EAAO;AACR,aAAOK,KAAK,CAACG,GAAN,CAAUR,IAAI,CAACO,MAAf,CAAP;AACD;;AALI,GAAP;AAOD;;GA7BetB,c;UAEcV,c,EACFA,c,EAE1BC,M","sourcesContent":["import {atom, useRecoilState} from \"recoil\"\nimport useSWR from \"swr\"\nimport {IDLE, LOADING} from \"../global/constants\"\nimport fetcher from \"../util/fetcher\"\nimport normalizeItem from \"../util/normalize-item\"\n\nexport const $marketItemsState = atom({\n  key: \"market-items::state\",\n  default: [],\n})\n\nexport const $marketItemsStatus = atom({\n  key: \"market-items::status\",\n  default: IDLE,\n})\n\nexport function useMarketItems() {\n  const url = process.env.REACT_APP_API_MARKET_ITEMS_LIST\n  const [status, setStatus] = useRecoilState($marketItemsStatus)\n  const [items, setItems] = useRecoilState($marketItemsState)\n\n  useSWR(url, fetcher, {\n    initialData: items,\n    refreshInterval: 10,\n    onLoadingSlow: () => {\n      setStatus(LOADING)\n    },\n    onSuccess: ({latestSaleOffers}) => {\n      setItems(latestSaleOffers.map(item => normalizeItem(item)))\n      setStatus(IDLE)\n    },\n    onError: error => {\n      console.log(\"Failed to fetch market items.\", error)\n    },\n  })\n\n  const asMap = new Map(items.map(item => [item.itemID, item]))\n\n  return {\n    status,\n    items,\n    has(item) {\n      return asMap.has(item.itemID)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}