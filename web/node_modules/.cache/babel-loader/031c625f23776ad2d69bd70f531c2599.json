{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { atomFamily, selectorFamily, useRecoilState } from \"recoil\";\nimport { fetchKibblesBalance } from \"../flow/fetch-kibbles-balance.script\";\nimport { IDLE, PROCESSING } from \"../global/constants\";\nexport const valueAtom = atomFamily({\n  key: \"kibbles-balance::state\",\n  default: selectorFamily({\n    key: \"kibbles-balance::default\",\n    get: address => async () => fetchKibblesBalance(address)\n  })\n});\nexport const statusAtom = atomFamily({\n  key: \"kibbles-balance::status\",\n  default: IDLE\n});\nexport function useKibblesBalance(address) {\n  _s();\n\n  const [balance, setBalance] = useRecoilState(valueAtom(address));\n  const [status, setStatus] = useRecoilState(statusAtom(address));\n\n  async function refresh() {\n    setStatus(PROCESSING);\n    await fetchKibblesBalance(address).then(setBalance);\n    setStatus(IDLE);\n  }\n\n  return {\n    balance,\n    status,\n    refresh,\n\n    async mint() {\n      setStatus(PROCESSING);\n      await fetch(process.env.REACT_APP_API_KIBBLE_MINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          recipient: address,\n          amount: 50.0\n        })\n      });\n      await fetchKibblesBalance(address).then(setBalance);\n      setStatus(IDLE);\n    }\n\n  };\n}\n\n_s(useKibblesBalance, \"C3z2xH0hbAiQBrlY6C45W6P5AQI=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});","map":{"version":3,"sources":["/Users/wuchao/flow/nft/ToyWorld/web/src/hooks/use-kibbles-balance.hook.js"],"names":["atomFamily","selectorFamily","useRecoilState","fetchKibblesBalance","IDLE","PROCESSING","valueAtom","key","default","get","address","statusAtom","useKibblesBalance","balance","setBalance","status","setStatus","refresh","then","mint","fetch","process","env","REACT_APP_API_KIBBLE_MINT","method","headers","body","JSON","stringify","recipient","amount"],"mappings":";;AAAA,SAAQA,UAAR,EAAoBC,cAApB,EAAoCC,cAApC,QAAyD,QAAzD;AACA,SAAQC,mBAAR,QAAkC,sCAAlC;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,qBAA/B;AAEA,OAAO,MAAMC,SAAS,GAAGN,UAAU,CAAC;AAClCO,EAAAA,GAAG,EAAE,wBAD6B;AAElCC,EAAAA,OAAO,EAAEP,cAAc,CAAC;AACtBM,IAAAA,GAAG,EAAE,0BADiB;AAEtBE,IAAAA,GAAG,EAAEC,OAAO,IAAI,YAAYP,mBAAmB,CAACO,OAAD;AAFzB,GAAD;AAFW,CAAD,CAA5B;AAQP,OAAO,MAAMC,UAAU,GAAGX,UAAU,CAAC;AACnCO,EAAAA,GAAG,EAAE,yBAD8B;AAEnCC,EAAAA,OAAO,EAAEJ;AAF0B,CAAD,CAA7B;AAKP,OAAO,SAASQ,iBAAT,CAA2BF,OAA3B,EAAoC;AAAA;;AACzC,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBZ,cAAc,CAACI,SAAS,CAACI,OAAD,CAAV,CAA5C;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBd,cAAc,CAACS,UAAU,CAACD,OAAD,CAAX,CAA1C;;AAEA,iBAAeO,OAAf,GAAyB;AACvBD,IAAAA,SAAS,CAACX,UAAD,CAAT;AACA,UAAMF,mBAAmB,CAACO,OAAD,CAAnB,CAA6BQ,IAA7B,CAAkCJ,UAAlC,CAAN;AACAE,IAAAA,SAAS,CAACZ,IAAD,CAAT;AACD;;AAED,SAAO;AACLS,IAAAA,OADK;AAELE,IAAAA,MAFK;AAGLE,IAAAA,OAHK;;AAIL,UAAME,IAAN,GAAa;AACXH,MAAAA,SAAS,CAACX,UAAD,CAAT;AACA,YAAMe,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,yBAAb,EAAwC;AACjDC,QAAAA,MAAM,EAAE,MADyC;AAEjDC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFwC;AAKjDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,SAAS,EAAEnB,OADQ;AAEnBoB,UAAAA,MAAM,EAAE;AAFW,SAAf;AAL2C,OAAxC,CAAX;AAUA,YAAM3B,mBAAmB,CAACO,OAAD,CAAnB,CAA6BQ,IAA7B,CAAkCJ,UAAlC,CAAN;AACAE,MAAAA,SAAS,CAACZ,IAAD,CAAT;AACD;;AAlBI,GAAP;AAoBD;;GA9BeQ,iB;UACgBV,c,EACFA,c","sourcesContent":["import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\nimport {fetchKibblesBalance} from \"../flow/fetch-kibbles-balance.script\"\nimport {IDLE, PROCESSING} from \"../global/constants\"\n\nexport const valueAtom = atomFamily({\n  key: \"kibbles-balance::state\",\n  default: selectorFamily({\n    key: \"kibbles-balance::default\",\n    get: address => async () => fetchKibblesBalance(address),\n  }),\n})\n\nexport const statusAtom = atomFamily({\n  key: \"kibbles-balance::status\",\n  default: IDLE,\n})\n\nexport function useKibblesBalance(address) {\n  const [balance, setBalance] = useRecoilState(valueAtom(address))\n  const [status, setStatus] = useRecoilState(statusAtom(address))\n\n  async function refresh() {\n    setStatus(PROCESSING)\n    await fetchKibblesBalance(address).then(setBalance)\n    setStatus(IDLE)\n  }\n\n  return {\n    balance,\n    status,\n    refresh,\n    async mint() {\n      setStatus(PROCESSING)\n      await fetch(process.env.REACT_APP_API_KIBBLE_MINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          recipient: address,\n          amount: 50.0,\n        }),\n      })\n      await fetchKibblesBalance(address).then(setBalance)\n      setStatus(IDLE)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}