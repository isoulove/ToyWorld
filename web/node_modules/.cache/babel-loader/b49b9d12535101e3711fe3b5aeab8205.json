{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { atomFamily, selectorFamily, useRecoilState, useRecoilValue } from \"recoil\";\nimport { LOADING, IDLE, PROCESSING, SUCCESS, ERROR, IDLE_DELAY } from \"../global/constants\";\nimport { isAccountInitialized } from \"../flow/is-account-initialized.script\";\nimport { initializeAccount } from \"../flow/initialize-account.tx\";\nimport { sleep } from \"../util/sleep\";\nimport { useFlowBalance } from \"./use-flow-balance.hook\";\nimport { useKibblesBalance } from \"./use-kibbles-balance.hook\";\nexport const $status = atomFamily({\n  key: \"init::status\",\n  default: IDLE\n});\nexport const $init = atomFamily({\n  key: \"init::state\",\n  default: selectorFamily({\n    key: \"init::default\",\n    get: address => () => isAccountInitialized(address)\n  })\n});\nexport const $computedInit = selectorFamily({\n  key: \"init::computed\",\n  get: address => async ({\n    get\n  }) => {\n    const all = get($init(address));\n    return all.Kibble && all.KittyItems && all.KittyItemsMarket;\n  }\n});\nexport function useInitialized(address) {\n  _s();\n\n  const [init, setInit] = useRecoilState($init(address));\n  const isInitialized = useRecoilValue($computedInit(address));\n  const [status, setStatus] = useRecoilState($status(address));\n  const flow = useFlowBalance(address);\n  const kibble = useKibblesBalance(address);\n\n  function recheck() {\n    isAccountInitialized(address).then(setInit);\n  }\n\n  return { ...init,\n    isInitialized,\n    status: isInitialized == null ? LOADING : status,\n    recheck,\n\n    async initialize() {\n      initializeAccount(address, {\n        onStart() {\n          setStatus(PROCESSING);\n        },\n\n        async onSuccess() {\n          recheck();\n          flow.refresh();\n          kibble.refresh();\n          setStatus(SUCCESS);\n        },\n\n        onError() {\n          setStatus(ERROR);\n        },\n\n        async onComplete() {\n          await sleep(IDLE_DELAY);\n          setStatus(IDLE);\n        }\n\n      });\n    }\n\n  };\n}\n\n_s(useInitialized, \"Zvzu+F+MkChDlf9wT1bD0emkmW8=\", false, function () {\n  return [useRecoilState, useRecoilValue, useRecoilState, useFlowBalance, useKibblesBalance];\n});","map":{"version":3,"sources":["/Users/wuchao/flow/nft/ToyWorld/web/src/hooks/use-initialized.hook.js"],"names":["atomFamily","selectorFamily","useRecoilState","useRecoilValue","LOADING","IDLE","PROCESSING","SUCCESS","ERROR","IDLE_DELAY","isAccountInitialized","initializeAccount","sleep","useFlowBalance","useKibblesBalance","$status","key","default","$init","get","address","$computedInit","all","Kibble","KittyItems","KittyItemsMarket","useInitialized","init","setInit","isInitialized","status","setStatus","flow","kibble","recheck","then","initialize","onStart","onSuccess","refresh","onError","onComplete"],"mappings":"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","sourcesContent":["import {\n  atomFamily,\n  selectorFamily,\n  useRecoilState,\n  useRecoilValue,\n} from \"recoil\"\nimport {\n  LOADING,\n  IDLE,\n  PROCESSING,\n  SUCCESS,\n  ERROR,\n  IDLE_DELAY,\n} from \"../global/constants\"\nimport {isAccountInitialized} from \"../flow/is-account-initialized.script\"\nimport {initializeAccount} from \"../flow/initialize-account.tx\"\nimport {sleep} from \"../util/sleep\"\nimport {useFlowBalance} from \"./use-flow-balance.hook\"\nimport {useKibblesBalance} from \"./use-kibbles-balance.hook\"\n\nexport const $status = atomFamily({\n  key: \"init::status\",\n  default: IDLE,\n})\n\nexport const $init = atomFamily({\n  key: \"init::state\",\n  default: selectorFamily({\n    key: \"init::default\",\n    get: address => () => isAccountInitialized(address),\n  }),\n})\n\nexport const $computedInit = selectorFamily({\n  key: \"init::computed\",\n  get: address => async ({get}) => {\n    const all = get($init(address))\n    return all.Kibble && all.KittyItems && all.KittyItemsMarket\n  },\n})\n\nexport function useInitialized(address) {\n  const [init, setInit] = useRecoilState($init(address))\n  const isInitialized = useRecoilValue($computedInit(address))\n  const [status, setStatus] = useRecoilState($status(address))\n  const flow = useFlowBalance(address)\n  const kibble = useKibblesBalance(address)\n\n  function recheck() {\n    isAccountInitialized(address).then(setInit)\n  }\n\n  return {\n    ...init,\n    isInitialized,\n    status: isInitialized == null ? LOADING : status,\n    recheck,\n    async initialize() {\n      initializeAccount(address, {\n        onStart() {\n          setStatus(PROCESSING)\n        },\n        async onSuccess() {\n          recheck()\n          flow.refresh()\n          kibble.refresh()\n          setStatus(SUCCESS)\n        },\n        onError() {\n          setStatus(ERROR)\n        },\n        async onComplete() {\n          await sleep(IDLE_DELAY)\n          setStatus(IDLE)\n        },\n      })\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}