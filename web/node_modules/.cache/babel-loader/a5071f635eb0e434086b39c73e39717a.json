{"ast":null,"code":"import * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { batch } from \"./util/batch\";\nconst CODE = fcl.cdc`\nimport NonFungibleToken from 0xNonFungibleToken\nimport KittyItems from 0xKittyItems\n\npub struct AccountItem {\n  pub let itemID: UInt64\n  pub let typeID: UInt64\n  pub let owner: Address\n\n  init(itemID: UInt64, typeID: UInt64, owner: Address) {\n    self.itemID = itemID\n    self.typeID = typeID\n    self.owner = owner\n  }\n}\n\npub fun fetch(address: Address, id: UInt64): AccountItem? {\n  if let col = getAccount(address).getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath).borrow() {\n    if let item = col.borrowKittyItem(id: id) {\n      return AccountItem(itemID: id, typeID: item.typeID, owner: address)\n    }\n  }\n\n  return nil\n}\n\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: AccountItem?} {\n  let r: {String: AccountItem?} = {}\n  var i = 0\n  while i < keys.length {\n    let key = keys[i]\n    let address = addresses[i]\n    let id = ids[i]\n    r[key] = fetch(address: address, id: id)\n    i = i + 1\n  }\n  return r\n}\n`;\n\nconst collate = px => {\n  return Object.keys(px).reduce((acc, key) => {\n    acc.keys.push(key);\n    acc.addresses.push(px[key][0]);\n    acc.ids.push(px[key][1]);\n    return acc;\n  }, {\n    keys: [],\n    addresses: [],\n    ids: []\n  });\n};\n\nconst {\n  enqueue\n} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\n  const {\n    keys,\n    addresses,\n    ids\n  } = collate(px);\n  return fcl.send([fcl.script(CODE), fcl.args([fcl.arg(keys, t.Array(t.String)), fcl.arg(addresses, t.Array(t.Address)), fcl.arg(ids.map(Number), t.Array(t.UInt64))])]).then(fcl.decode);\n});\nexport async function fetchAccountItem(address, id) {\n  if (address == null) return Promise.resolve(null);\n  if (id == null) return Promise.resolve(null);\n  return enqueue(address, id);\n}","map":{"version":3,"sources":["/Users/wuchao/flow/nft/ToyWorld/web/src/flow/fetch-account-item.script.js"],"names":["fcl","t","batch","CODE","cdc","collate","px","Object","keys","reduce","acc","key","push","addresses","ids","enqueue","send","script","args","arg","Array","String","Address","map","Number","UInt64","then","decode","fetchAccountItem","address","id","Promise","resolve"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,SAAQC,KAAR,QAAoB,cAApB;AAEA,MAAMC,IAAI,GAAGH,GAAG,CAACI,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtCA;;AAwCA,MAAMC,OAAO,GAAGC,EAAE,IAAI;AACpB,SAAOC,MAAM,CAACC,IAAP,CAAYF,EAAZ,EAAgBG,MAAhB,CACL,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZD,IAAAA,GAAG,CAACF,IAAJ,CAASI,IAAT,CAAcD,GAAd;AACAD,IAAAA,GAAG,CAACG,SAAJ,CAAcD,IAAd,CAAmBN,EAAE,CAACK,GAAD,CAAF,CAAQ,CAAR,CAAnB;AACAD,IAAAA,GAAG,CAACI,GAAJ,CAAQF,IAAR,CAAaN,EAAE,CAACK,GAAD,CAAF,CAAQ,CAAR,CAAb;AACA,WAAOD,GAAP;AACD,GANI,EAOL;AAACF,IAAAA,IAAI,EAAE,EAAP;AAAWK,IAAAA,SAAS,EAAE,EAAtB;AAA0BC,IAAAA,GAAG,EAAE;AAA/B,GAPK,CAAP;AASD,CAVD;;AAYA,MAAM;AAACC,EAAAA;AAAD,IAAYb,KAAK,CAAC,oBAAD,EAAuB,MAAMI,EAAN,IAAY;AACxD,QAAM;AAACE,IAAAA,IAAD;AAAOK,IAAAA,SAAP;AAAkBC,IAAAA;AAAlB,MAAyBT,OAAO,CAACC,EAAD,CAAtC;AAEA,SAAON,GAAG,CACPgB,IADI,CACC,CACJhB,GAAG,CAACiB,MAAJ,CAAWd,IAAX,CADI,EAEJH,GAAG,CAACkB,IAAJ,CAAS,CACPlB,GAAG,CAACmB,GAAJ,CAAQX,IAAR,EAAcP,CAAC,CAACmB,KAAF,CAAQnB,CAAC,CAACoB,MAAV,CAAd,CADO,EAEPrB,GAAG,CAACmB,GAAJ,CAAQN,SAAR,EAAmBZ,CAAC,CAACmB,KAAF,CAAQnB,CAAC,CAACqB,OAAV,CAAnB,CAFO,EAGPtB,GAAG,CAACmB,GAAJ,CAAQL,GAAG,CAACS,GAAJ,CAAQC,MAAR,CAAR,EAAyBvB,CAAC,CAACmB,KAAF,CAAQnB,CAAC,CAACwB,MAAV,CAAzB,CAHO,CAAT,CAFI,CADD,EASJC,IATI,CASC1B,GAAG,CAAC2B,MATL,CAAP;AAUD,CAbsB,CAAvB;AAeA,OAAO,eAAeC,gBAAf,CAAgCC,OAAhC,EAAyCC,EAAzC,EAA6C;AAClD,MAAID,OAAO,IAAI,IAAf,EAAqB,OAAOE,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACrB,MAAIF,EAAE,IAAI,IAAV,EAAgB,OAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AAChB,SAAOjB,OAAO,CAACc,OAAD,EAAUC,EAAV,CAAd;AACD","sourcesContent":["import * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\nimport {batch} from \"./util/batch\"\n\nconst CODE = fcl.cdc`\nimport NonFungibleToken from 0xNonFungibleToken\nimport KittyItems from 0xKittyItems\n\npub struct AccountItem {\n  pub let itemID: UInt64\n  pub let typeID: UInt64\n  pub let owner: Address\n\n  init(itemID: UInt64, typeID: UInt64, owner: Address) {\n    self.itemID = itemID\n    self.typeID = typeID\n    self.owner = owner\n  }\n}\n\npub fun fetch(address: Address, id: UInt64): AccountItem? {\n  if let col = getAccount(address).getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath).borrow() {\n    if let item = col.borrowKittyItem(id: id) {\n      return AccountItem(itemID: id, typeID: item.typeID, owner: address)\n    }\n  }\n\n  return nil\n}\n\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: AccountItem?} {\n  let r: {String: AccountItem?} = {}\n  var i = 0\n  while i < keys.length {\n    let key = keys[i]\n    let address = addresses[i]\n    let id = ids[i]\n    r[key] = fetch(address: address, id: id)\n    i = i + 1\n  }\n  return r\n}\n`\n\nconst collate = px => {\n  return Object.keys(px).reduce(\n    (acc, key) => {\n      acc.keys.push(key)\n      acc.addresses.push(px[key][0])\n      acc.ids.push(px[key][1])\n      return acc\n    },\n    {keys: [], addresses: [], ids: []}\n  )\n}\n\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\n  const {keys, addresses, ids} = collate(px)\n\n  return fcl\n    .send([\n      fcl.script(CODE),\n      fcl.args([\n        fcl.arg(keys, t.Array(t.String)),\n        fcl.arg(addresses, t.Array(t.Address)),\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\n      ]),\n    ])\n    .then(fcl.decode)\n})\n\nexport async function fetchAccountItem(address, id) {\n  if (address == null) return Promise.resolve(null)\n  if (id == null) return Promise.resolve(null)\n  return enqueue(address, id)\n}\n"]},"metadata":{},"sourceType":"module"}