{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { atomFamily, selectorFamily, useRecoilState } from \"recoil\";\nimport { fetchAccountItems } from \"../flow/fetch-account-items.script\";\nimport { IDLE, PROCESSING } from \"../global/constants\";\nexport const $state = atomFamily({\n  key: \"account-items::state\",\n  default: selectorFamily({\n    key: \"account-items::default\",\n    get: address => async () => fetchAccountItems(address)\n  })\n});\nexport const $status = atomFamily({\n  key: \"account-items::status\",\n  default: IDLE\n});\nexport function useAccountItems(address) {\n  _s();\n\n  const [items, setItems] = useRecoilState($state(address));\n  const [status, setStatus] = useRecoilState($status(address));\n  return {\n    ids: items,\n    status,\n\n    async mint() {\n      setStatus(PROCESSING);\n      await fetch(process.env.REACT_APP_API_KITTY_ITEM_MINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          recipient: address,\n          // Random typeID between 1 - 5\n          typeID: Math.floor(Math.random() * (5 - 1)) + 1\n        })\n      });\n      await fetchAccountItems(address).then(setItems);\n      setStatus(IDLE);\n    },\n\n    async refresh() {\n      setStatus(PROCESSING);\n      await fetchAccountItems(address).then(setItems);\n      setStatus(IDLE);\n    }\n\n  };\n}\n\n_s(useAccountItems, \"DmkXXUMosCXNAGhNP9LfFG5MUPY=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});","map":{"version":3,"sources":["/Users/wuchao/flow/nft/ToyWorld/web/src/hooks/use-account-items.hook.js"],"names":["atomFamily","selectorFamily","useRecoilState","fetchAccountItems","IDLE","PROCESSING","$state","key","default","get","address","$status","useAccountItems","items","setItems","status","setStatus","ids","mint","fetch","process","env","REACT_APP_API_KITTY_ITEM_MINT","method","headers","body","JSON","stringify","recipient","typeID","Math","floor","random","then","refresh"],"mappings":";;AAAA,SAAQA,UAAR,EAAoBC,cAApB,EAAoCC,cAApC,QAAyD,QAAzD;AACA,SAAQC,iBAAR,QAAgC,oCAAhC;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,qBAA/B;AAEA,OAAO,MAAMC,MAAM,GAAGN,UAAU,CAAC;AAC/BO,EAAAA,GAAG,EAAE,sBAD0B;AAE/BC,EAAAA,OAAO,EAAEP,cAAc,CAAC;AACtBM,IAAAA,GAAG,EAAE,wBADiB;AAEtBE,IAAAA,GAAG,EAAEC,OAAO,IAAI,YAAYP,iBAAiB,CAACO,OAAD;AAFvB,GAAD;AAFQ,CAAD,CAAzB;AAQP,OAAO,MAAMC,OAAO,GAAGX,UAAU,CAAC;AAChCO,EAAAA,GAAG,EAAE,uBAD2B;AAEhCC,EAAAA,OAAO,EAAEJ;AAFuB,CAAD,CAA1B;AAKP,OAAO,SAASQ,eAAT,CAAyBF,OAAzB,EAAkC;AAAA;;AACvC,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBZ,cAAc,CAACI,MAAM,CAACI,OAAD,CAAP,CAAxC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBd,cAAc,CAACS,OAAO,CAACD,OAAD,CAAR,CAA1C;AAEA,SAAO;AACLO,IAAAA,GAAG,EAAEJ,KADA;AAELE,IAAAA,MAFK;;AAIL,UAAMG,IAAN,GAAa;AACXF,MAAAA,SAAS,CAACX,UAAD,CAAT;AACA,YAAMc,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,6BAAb,EAA4C;AACrDC,QAAAA,MAAM,EAAE,MAD6C;AAErDC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF4C;AAKrDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,SAAS,EAAElB,OADQ;AAEnB;AACAmB,UAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,IAAI,CAArB,CAAX,IAAsC;AAH3B,SAAf;AAL+C,OAA5C,CAAX;AAWA,YAAM7B,iBAAiB,CAACO,OAAD,CAAjB,CAA2BuB,IAA3B,CAAgCnB,QAAhC,CAAN;AACAE,MAAAA,SAAS,CAACZ,IAAD,CAAT;AACD,KAnBI;;AAoBL,UAAM8B,OAAN,GAAgB;AACdlB,MAAAA,SAAS,CAACX,UAAD,CAAT;AACA,YAAMF,iBAAiB,CAACO,OAAD,CAAjB,CAA2BuB,IAA3B,CAAgCnB,QAAhC,CAAN;AACAE,MAAAA,SAAS,CAACZ,IAAD,CAAT;AACD;;AAxBI,GAAP;AA0BD;;GA9BeQ,e;UACYV,c,EACEA,c","sourcesContent":["import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\nimport {fetchAccountItems} from \"../flow/fetch-account-items.script\"\nimport {IDLE, PROCESSING} from \"../global/constants\"\n\nexport const $state = atomFamily({\n  key: \"account-items::state\",\n  default: selectorFamily({\n    key: \"account-items::default\",\n    get: address => async () => fetchAccountItems(address),\n  }),\n})\n\nexport const $status = atomFamily({\n  key: \"account-items::status\",\n  default: IDLE,\n})\n\nexport function useAccountItems(address) {\n  const [items, setItems] = useRecoilState($state(address))\n  const [status, setStatus] = useRecoilState($status(address))\n\n  return {\n    ids: items,\n    status,\n\n    async mint() {\n      setStatus(PROCESSING)\n      await fetch(process.env.REACT_APP_API_KITTY_ITEM_MINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          recipient: address,\n          // Random typeID between 1 - 5\n          typeID: Math.floor(Math.random() * (5 - 1)) + 1,\n        }),\n      })\n      await fetchAccountItems(address).then(setItems)\n      setStatus(IDLE)\n    },\n    async refresh() {\n      setStatus(PROCESSING)\n      await fetchAccountItems(address).then(setItems)\n      setStatus(IDLE)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}